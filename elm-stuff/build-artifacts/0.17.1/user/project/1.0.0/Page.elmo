var _user$project$Page_ops = _user$project$Page_ops || {};
_user$project$Page_ops['=>'] = F2(
	function (v0, v1) {
		return {ctor: '_Tuple2', _0: v0, _1: v1};
	});
var _user$project$Page$defaultStyle = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Page_ops['=>'], 'font-size', '1em'),
			A2(_user$project$Page_ops['=>'], 'color', 'black'),
			A2(_user$project$Page_ops['=>'], 'font-family', 'Helvetica, Arial, sans-serif'),
			A2(_user$project$Page_ops['=>'], 'padding', '0'),
			A2(_user$project$Page_ops['=>'], 'margin', '0')
		]));
var _user$project$Page$contentBoxStyleTop = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Page_ops['=>'], 'width', '100%'),
			A2(_user$project$Page_ops['=>'], 'min-height', '20%'),
			A2(_user$project$Page_ops['=>'], 'border', '1px solid darkgray'),
			A2(_user$project$Page_ops['=>'], 'padding', '0'),
			A2(_user$project$Page_ops['=>'], 'margin', '0'),
			A2(_user$project$Page_ops['=>'], 'background-color', 'rgba(255, 255, 255, 0.9)'),
			A2(_user$project$Page_ops['=>'], 'position', 'relative'),
			A2(_user$project$Page_ops['=>'], 'overflow', 'hidden'),
			A2(_user$project$Page_ops['=>'], 'user-select', 'none'),
			A2(_user$project$Page_ops['=>'], 'display', 'flex'),
			A2(_user$project$Page_ops['=>'], 'flex-direction', 'row'),
			A2(_user$project$Page_ops['=>'], 'align-items', 'start')
		]));
var _user$project$Page$storyBoxStyleTop = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Page_ops['=>'], 'background-repeat', 'no-repeat'),
			A2(_user$project$Page_ops['=>'], 'width', '350px'),
			A2(_user$project$Page_ops['=>'], 'padding', '0 10% 2% 2%'),
			A2(_user$project$Page_ops['=>'], 'border-right', '1px solid darkgray'),
			A2(_user$project$Page_ops['=>'], 'user-select', 'none')
		]));
var _user$project$Page$choiceBoxStyleTop = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Page_ops['=>'], 'width', '40%'),
			A2(_user$project$Page_ops['=>'], 'min-height', '20%'),
			A2(_user$project$Page_ops['=>'], 'align-self', 'center'),
			A2(_user$project$Page_ops['=>'], '-ms-flex-item-align', 'center')
		]));
var _user$project$Page$eventBoxStyleTop = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Page_ops['=>'], 'float', 'right'),
			A2(_user$project$Page_ops['=>'], 'width', '48%'),
			A2(_user$project$Page_ops['=>'], 'height', '48%'),
			A2(_user$project$Page_ops['=>'], 'float', 'left'),
			A2(_user$project$Page_ops['=>'], 'border', '1px solid darkgray'),
			A2(_user$project$Page_ops['=>'], 'display', 'flex'),
			A2(_user$project$Page_ops['=>'], 'align-items', 'center'),
			A2(_user$project$Page_ops['=>'], 'align-self', 'center')
		]));
var _user$project$Page$arrowStyleTop = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Page_ops['=>'], 'position', 'absolute'),
			A2(_user$project$Page_ops['=>'], 'top', '35%'),
			A2(_user$project$Page_ops['=>'], 'left', '-4.8%')
		]));
var _user$project$Page$contentBoxStyleLeft = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Page_ops['=>'], 'width', '50%'),
			A2(_user$project$Page_ops['=>'], 'height', 'auto'),
			A2(_user$project$Page_ops['=>'], 'min-height', '20%'),
			A2(_user$project$Page_ops['=>'], 'border', '1px solid darkgray'),
			A2(_user$project$Page_ops['=>'], 'padding', '0'),
			A2(_user$project$Page_ops['=>'], 'margin', '0'),
			A2(_user$project$Page_ops['=>'], 'background-color', 'rgba(255, 255, 255, 0.9'),
			A2(_user$project$Page_ops['=>'], 'position', 'relative'),
			A2(_user$project$Page_ops['=>'], 'overflow', 'hidden')
		]));
var _user$project$Page$storyBoxStyleLeft = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Page_ops['=>'], 'width', '92%'),
			A2(_user$project$Page_ops['=>'], 'height', '45%'),
			A2(_user$project$Page_ops['=>'], 'padding', '0 4% 5% 4%'),
			A2(_user$project$Page_ops['=>'], 'background-repeat', 'no-repeat'),
			A2(_user$project$Page_ops['=>'], 'background-position', 'right 1em center'),
			A2(_user$project$Page_ops['=>'], 'border-bottom', '1px solid darkgray'),
			A2(_user$project$Page_ops['=>'], 'user-select', 'none')
		]));
var _user$project$Page$choiceBoxStyleLeft = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Page_ops['=>'], 'width', '100%'),
			A2(_user$project$Page_ops['=>'], 'height', '45%'),
			A2(_user$project$Page_ops['=>'], 'padding', '5% 0 0 0'),
			A2(_user$project$Page_ops['=>'], 'position', 'relative')
		]));
var _user$project$Page$eventBoxStyleLeft = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Page_ops['=>'], 'width', '100%'),
			A2(_user$project$Page_ops['=>'], 'height', '45%'),
			A2(_user$project$Page_ops['=>'], 'padding', '5% 0 0 0'),
			A2(_user$project$Page_ops['=>'], 'position', 'relative')
		]));
var _user$project$Page$arrowStyleLeft = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Page_ops['=>'], 'position', 'absolute'),
			A2(_user$project$Page_ops['=>'], 'left', '47.3%'),
			A2(_user$project$Page_ops['=>'], 'top', '-20.0%')
		]));
var _user$project$Page$arrowStyleGameEventLeft = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Page_ops['=>'], 'position', 'absolute'),
			A2(_user$project$Page_ops['=>'], 'left', '48%'),
			A2(_user$project$Page_ops['=>'], 'top', '-41%')
		]));
var _user$project$Page$multipleChoiceBoxStyle = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Page_ops['=>'], 'width', '100%'),
			A2(_user$project$Page_ops['=>'], 'height', '100%'),
			A2(_user$project$Page_ops['=>'], 'float', 'left'),
			A2(_user$project$Page_ops['=>'], 'position', 'relative')
		]));
var _user$project$Page$choicesContainer = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Page_ops['=>'], 'padding', '5% 0.3em 5% 0em'),
			A2(_user$project$Page_ops['=>'], 'display', '-ms-flexbox'),
			A2(_user$project$Page_ops['=>'], '-ms-flex-direction', 'row'),
			A2(_user$project$Page_ops['=>'], '-ms-flex-pack', 'center'),
			A2(_user$project$Page_ops['=>'], '-ms-justify-content', 'center'),
			A2(_user$project$Page_ops['=>'], 'display', 'flex'),
			A2(_user$project$Page_ops['=>'], 'flex-direction', 'row'),
			A2(_user$project$Page_ops['=>'], 'align-items', 'flex-start'),
			A2(_user$project$Page_ops['=>'], 'justify-content', 'center')
		]));
var _user$project$Page$choiceBoxStyle = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Page_ops['=>'], 'width', '50%'),
			A2(_user$project$Page_ops['=>'], 'height', '100%'),
			A2(_user$project$Page_ops['=>'], 'float', 'left'),
			A2(_user$project$Page_ops['=>'], 'display', 'inline'),
			A2(_user$project$Page_ops['=>'], 'background-color', 'olive')
		]));
var _user$project$Page$clearingDivStyle = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Page_ops['=>'], 'clear', 'left'),
			A2(_user$project$Page_ops['=>'], 'height', '0')
		]));
var _user$project$Page$pageStyle = function (model) {
	return _elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_user$project$Page_ops['=>'],
				'width',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(model.width - 37),
					'px')),
				A2(
				_user$project$Page_ops['=>'],
				'height',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(model.height - 15),
					'px')),
				A2(_user$project$Page_ops['=>'], 'padding', '15px 20px 0px 17px'),
				A2(_user$project$Page_ops['=>'], 'position', 'relative')
			]));
};
var _user$project$Page$pageImageStyle = function (model) {
	return _elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_user$project$Page_ops['=>'],
				'width',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(model.width),
					'px')),
				A2(
				_user$project$Page_ops['=>'],
				'height',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(model.height),
					'px')),
				A2(
				_user$project$Page_ops['=>'],
				'background-image',
				A2(
					_elm_lang$core$Basics_ops['++'],
					'url(\'',
					A2(_elm_lang$core$Basics_ops['++'], model.image, '\')'))),
				A2(_user$project$Page_ops['=>'], 'background-repeat', 'no-repeat'),
				A2(_user$project$Page_ops['=>'], 'position', 'absolute'),
				A2(_user$project$Page_ops['=>'], 'top', '0px'),
				A2(_user$project$Page_ops['=>'], 'left', '0px')
			]));
};
var _user$project$Page$headingStyle = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Page_ops['=>'], 'font-size', '1em'),
			A2(_user$project$Page_ops['=>'], 'font-weight', 'bold'),
			A2(_user$project$Page_ops['=>'], 'font-family', 'Helvetica, Arial, sans-serif'),
			A2(_user$project$Page_ops['=>'], 'padding', '0.8em 0em 0.3em 0em'),
			A2(_user$project$Page_ops['=>'], 'margin', '0')
		]));
var _user$project$Page$subheadingStyle = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Page_ops['=>'], 'font-size', '0.8em'),
			A2(_user$project$Page_ops['=>'], 'font-weight', 'bold'),
			A2(_user$project$Page_ops['=>'], 'font-family', 'Helvetica, Arial, sans-serif'),
			A2(_user$project$Page_ops['=>'], 'padding', '0em 0em 0.2em 0em'),
			A2(_user$project$Page_ops['=>'], 'margin', '0')
		]));
var _user$project$Page$choicesHeadingStyle = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Page_ops['=>'], 'font-size', '0.8em'),
			A2(_user$project$Page_ops['=>'], 'font-weight', 'bold'),
			A2(_user$project$Page_ops['=>'], 'font-family', 'Helvetica, Arial, sans-serif'),
			A2(_user$project$Page_ops['=>'], 'padding', '1em 0em 1em 0em'),
			A2(_user$project$Page_ops['=>'], 'margin', '0'),
			A2(_user$project$Page_ops['=>'], 'text-align', 'center')
		]));
var _user$project$Page$paragraphStyle = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Page_ops['=>'], 'font-size', '0.8em'),
			A2(_user$project$Page_ops['=>'], 'font-family', _user$project$Defaults$fontFamily),
			A2(_user$project$Page_ops['=>'], 'line-height', '1.3em'),
			A2(_user$project$Page_ops['=>'], 'user-select', 'none'),
			A2(_user$project$Page_ops['=>'], '-moz-user-select', 'none')
		]));
var _user$project$Page$noFx = function (model) {
	return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$Page$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'NoOp':
				return _user$project$Page$noFx(model);
			case 'UpdateChoices':
				var _p1 = _p0._0;
				var choiceLink$ = A2(
					_elm_lang$core$Maybe$withDefault,
					1.1,
					A2(_elm_community$list_extra$List_Extra$getAt, _p1, model.choiceLinks));
				var updateChoice = F2(
					function (choiceId, choiceModel) {
						return _elm_lang$core$Native_Utils.eq(choiceId, _p1) ? A2(_user$project$Choice$update, _p0._1, choiceModel) : choiceModel;
					});
				var choiceBoxes$ = A2(_elm_lang$core$List$indexedMap, updateChoice, model.choiceBoxes);
				var currentChoice$ = A2(
					_elm_lang$core$Maybe$withDefault,
					_user$project$Choice$model,
					A2(_elm_community$list_extra$List_Extra$getAt, _p1, choiceBoxes$));
				return _elm_lang$core$Native_Utils.eq(
					function (_) {
						return _.currentMsg;
					}(
						function (_) {
							return _.button;
						}(currentChoice$)),
					_user$project$ImageButton$Click) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{choiceBoxes: choiceBoxes$, activeLink: choiceLink$}),
					_1: _elm_lang$core$Platform_Cmd$none
				} : {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{choiceBoxes: choiceBoxes$}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var gameEventBox$ = A2(_user$project$GameEvent$update, _p0._0, model.gameEventBox);
				var button = function (_) {
					return _.button;
				}(gameEventBox$);
				return _elm_lang$core$Native_Utils.eq(button.currentMsg, _user$project$LabeledButton$Click) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{gameEventBox: gameEventBox$, activeLink: model.buttonLink}),
					_1: _elm_lang$core$Platform_Cmd$none
				} : {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{gameEventBox: gameEventBox$}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Page$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return {heading: a, subheading: b, description: c, image: d, width: e, height: f, choices: g, choiceLinks: h, choiceBoxes: i, pageType: j, gameEventBox: k, buttonLink: l, activeLink: m};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Page$Left = {ctor: 'Left'};
var _user$project$Page$Top = {ctor: 'Top'};
var _user$project$Page$GameEvent = function (a) {
	return {ctor: 'GameEvent', _0: a};
};
var _user$project$Page$Choice = function (a) {
	return {ctor: 'Choice', _0: a};
};
var _user$project$Page$model = function () {
	var choiceLinks$ = _elm_lang$core$Native_List.fromArray(
		[1.1, 2.1]);
	var choices$ = _elm_lang$core$Native_List.fromArray(
		['This is the first choice that the player has.', 'This is the second choice that the player has.']);
	var choiceBoxes$ = A2(
		_elm_lang$core$List$map,
		function (string) {
			return _user$project$Choice$init(string);
		},
		choices$);
	return {
		heading: 'Adventure!',
		subheading: 'The Quest Begins',
		description: '\n        Lorem ipsum dolor sit amet, \n        volutpat eros massa ut, vel semper bibendum pharetra fringilla ullamcorper cras, \n        volutpat eros massa ut, vel semper bibendum pharetra fringilla ullamcorper cras, \n        volutpat eros massa ut, vel semper bibendum pharetra fringilla ullamcorper cras, \n     ',
		image: A2(_elm_lang$core$Basics_ops['++'], _user$project$Defaults$imagesLocation, 'test.png'),
		width: _user$project$Defaults$width,
		height: 479,
		choices: choices$,
		choiceLinks: choiceLinks$,
		choiceBoxes: choiceBoxes$,
		pageType: _user$project$Page$Choice(_user$project$Page$Top),
		gameEventBox: A3(_user$project$GameEvent$init, 'label', 'This is a really long description of a game event that might occur', _user$project$GameEvent$NextPage),
		buttonLink: 1.1,
		activeLink: 1.1
	};
}();
var _user$project$Page$init = function (data) {
	var gameEventBox$ = function () {
		var buttonEventType$ = function () {
			var _p2 = data.buttonEventType;
			switch (_p2) {
				case 'next':
					return _user$project$GameEvent$NextPage;
				case 'Msg':
					return _user$project$GameEvent$TakeMsg;
				case 'gameover':
					return _user$project$GameEvent$GameOver;
				case 'question':
					return _user$project$GameEvent$Question;
				default:
					return _user$project$GameEvent$Any;
			}
		}();
		return A3(_user$project$GameEvent$init, data.buttonLabel, data.buttonEventDescription, buttonEventType$);
	}();
	var choiceBoxes$ = A2(
		_elm_lang$core$List$map,
		function (string) {
			return _user$project$Choice$init(string);
		},
		data.choices);
	var typeOfPage = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(data.choices),
		1) > 0) ? _user$project$Page$Choice : _user$project$Page$GameEvent;
	var alignment = function () {
		var _p3 = data.alignment;
		switch (_p3) {
			case 'top':
				return _user$project$Page$Top;
			case 'left':
				return _user$project$Page$Left;
			default:
				return _user$project$Page$Top;
		}
	}();
	return _user$project$Page$noFx(
		_elm_lang$core$Native_Utils.update(
			_user$project$Page$model,
			{
				heading: data.heading,
				subheading: data.subheading,
				description: data.description,
				choices: data.choices,
				choiceLinks: data.choiceLinks,
				choiceBoxes: choiceBoxes$,
				pageType: typeOfPage(alignment),
				image: A2(_elm_lang$core$Basics_ops['++'], _user$project$Defaults$imagesLocation, data.image),
				gameEventBox: gameEventBox$,
				buttonLink: data.buttonLink,
				activeLink: data.id
			}));
};
var _user$project$Page$UpdateGameEventBox = function (a) {
	return {ctor: 'UpdateGameEventBox', _0: a};
};
var _user$project$Page$UpdateChoices = F2(
	function (a, b) {
		return {ctor: 'UpdateChoices', _0: a, _1: b};
	});
var _user$project$Page$viewChoice = F2(
	function (id, model) {
		return A2(
			_elm_lang$html$Html_App$map,
			_user$project$Page$UpdateChoices(id),
			_user$project$Choice$view(model));
	});
var _user$project$Page$view = function (model) {
	var forward = function (toMsg) {
		return _elm_lang$html$Html_App$map(toMsg);
	};
	var choiceBoxes = A2(_elm_lang$core$List$indexedMap, _user$project$Page$viewChoice, model.choiceBoxes);
	var contentBox = function () {
		var _p4 = model.pageType;
		if (_p4.ctor === 'Choice') {
			if (_p4._0.ctor === 'Top') {
				return 'contentBoxStyleTop';
			} else {
				return '';
			}
		} else {
			if (_p4._0.ctor === 'Top') {
				return 'contentBoxStyleTop';
			} else {
				return '';
			}
		}
	}();
	var arrowImage = function () {
		var _p5 = model.pageType;
		if (_p5.ctor === 'Choice') {
			if (_p5._0.ctor === 'Top') {
				return 'roundArrowRight.png';
			} else {
				return 'roundArrowDown.png';
			}
		} else {
			if (_p5._0.ctor === 'Top') {
				return 'roundArrowRight.png';
			} else {
				return 'roundArrowDown.png';
			}
		}
	}();
	var arrowStyle = function () {
		var _p6 = model.pageType;
		if (_p6.ctor === 'Choice') {
			if (_p6._0.ctor === 'Top') {
				return _user$project$Page$arrowStyleTop;
			} else {
				return _user$project$Page$arrowStyleLeft;
			}
		} else {
			if (_p6._0.ctor === 'Top') {
				return _user$project$Page$arrowStyleTop;
			} else {
				return _user$project$Page$arrowStyleGameEventLeft;
			}
		}
	}();
	var eventBox = function () {
		var gameEventBox = A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('multipleChoiceBox'),
					_user$project$Page$defaultStyle,
					_user$project$Page$multipleChoiceBoxStyle
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html_App$map,
					_user$project$Page$UpdateGameEventBox,
					_user$project$GameEvent$view(model.gameEventBox)),
					A2(
					_elm_lang$html$Html$img,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$src(
							A2(_elm_lang$core$Basics_ops['++'], _user$project$Defaults$imagesLocation, arrowImage)),
							arrowStyle
						]),
					_elm_lang$core$Native_List.fromArray(
						[]))
				]));
		var multipleChoiceBox = A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('multipleChoiceBox'),
					_user$project$Page$defaultStyle,
					_user$project$Page$multipleChoiceBoxStyle
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$h2,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('choicesHeading'),
							_user$project$Page$defaultStyle,
							_user$project$Page$choicesHeadingStyle
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Choices')
						])),
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[
							_user$project$Page$choicesContainer,
							_elm_lang$html$Html_Attributes$class('choicesContainer')
						]),
					choiceBoxes),
					A2(
					_elm_lang$html$Html$img,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$src(
							A2(_elm_lang$core$Basics_ops['++'], _user$project$Defaults$imagesLocation, arrowImage)),
							arrowStyle
						]),
					_elm_lang$core$Native_List.fromArray(
						[]))
				]));
		var _p7 = model.pageType;
		if (_p7.ctor === 'Choice') {
			if (_p7._0.ctor === 'Top') {
				return multipleChoiceBox;
			} else {
				return multipleChoiceBox;
			}
		} else {
			if (_p7._0.ctor === 'Top') {
				return gameEventBox;
			} else {
				return gameEventBox;
			}
		}
	}();
	var userMsgBoxStyle = function () {
		var _p8 = model.pageType;
		if (_p8.ctor === 'Choice') {
			if (_p8._0.ctor === 'Top') {
				return _user$project$Page$choiceBoxStyleTop;
			} else {
				return _user$project$Page$choiceBoxStyleLeft;
			}
		} else {
			if (_p8._0.ctor === 'Top') {
				return _user$project$Page$choiceBoxStyleTop;
			} else {
				return _user$project$Page$choiceBoxStyleLeft;
			}
		}
	}();
	var storyBoxStyle = function () {
		var _p9 = model.pageType;
		if (_p9.ctor === 'Choice') {
			if (_p9._0.ctor === 'Top') {
				return _user$project$Page$storyBoxStyleTop;
			} else {
				return _user$project$Page$storyBoxStyleLeft;
			}
		} else {
			if (_p9._0.ctor === 'Top') {
				return _user$project$Page$storyBoxStyleTop;
			} else {
				return _user$project$Page$storyBoxStyleLeft;
			}
		}
	}();
	var contentBoxStyle = function () {
		var _p10 = model.pageType;
		if (_p10.ctor === 'Choice') {
			if (_p10._0.ctor === 'Top') {
				return _user$project$Page$contentBoxStyleTop;
			} else {
				return _user$project$Page$contentBoxStyleLeft;
			}
		} else {
			if (_p10._0.ctor === 'Left') {
				return _user$project$Page$contentBoxStyleLeft;
			} else {
				return _user$project$Page$contentBoxStyleTop;
			}
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('page'),
				_user$project$Page$pageStyle(model)
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('pageImage'),
						_user$project$Page$pageImageStyle(model)
					]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class(contentBox),
						contentBoxStyle
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('storyBox'),
								storyBoxStyle
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$h1,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Attributes$class('storyHeading'),
										_user$project$Page$defaultStyle,
										_user$project$Page$headingStyle
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text(model.heading)
									])),
								A2(
								_elm_lang$html$Html$h2,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Attributes$class('storySubheading'),
										_user$project$Page$defaultStyle,
										_user$project$Page$subheadingStyle
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text(model.subheading)
									])),
								A2(
								_elm_lang$html$Html$div,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Attributes$class('storyParagraph'),
										_user$project$Page$defaultStyle,
										_user$project$Page$paragraphStyle
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										A2(
										_evancz$elm_markdown$Markdown$toHtml,
										_elm_lang$core$Native_List.fromArray(
											[]),
										model.description)
									]))
							])),
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('eventBox'),
								_user$project$Page$defaultStyle,
								userMsgBoxStyle
							]),
						_elm_lang$core$Native_List.fromArray(
							[eventBox])),
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('clearingDiv'),
								_user$project$Page$clearingDivStyle
							]),
						_elm_lang$core$Native_List.fromArray(
							[]))
					]))
			]));
};
var _user$project$Page$NoOp = {ctor: 'NoOp'};
